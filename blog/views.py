from django.shortcuts import render
from django.http import HttpResponse


def Text(request):
    return HttpResponse("Django - это высокоуровневый Python  ВЕБ-фреймворк, который  позволяет быстро создовать безопасные"
                        "и поддерживаемые веб-сайты. Созданный опытными разработчиками, Django берет  на  себя большую "
                        "часть хлопот веб-разработки, поэтому вы можете  сосредоточиться  на написании своего веб-приложения"
                        " без необходимости изобретать велосипед. Он бесплатный и с открытым исходным кодом, имеет растущее"
                        "и активное сообщество, отличную документацию и множество вариантов как бесплатной, так и платной поддержки."
                        "Django помогает писать программное обеспечение, которое будет:"
                        "Django следует философии «Всё включено» и предоставляет почти всё, что разработчики могут захотеть сделать «из коробки». Поскольку всё, что вам нужно, является частью единого"
                        "«продукта», всё это безупречно работает вместе, соответствует последовательным принципам проектирования и имеет обширную и актуальную документацию. ")

















def Text2(request):
    return HttpResponse("Разносторонним"
                         "Django может быть (и был) использован для создания практически любого типа веб-сайтов — от систем"
                        " управления контентом и wiki до социальных сетей и новостных сайтов. Он может работать с любой клиентской"
                        " средой и может доставлять контент практически в любом формате. Сайт, который вы сейчас читаете,"
                       " создан с помощью Django!")









def Text3(request):
    return HttpResponse("Безопасным"
"Django помогает разработчикам избежать многих распространённых ошибок безопасности, предоставляя фреймворк, разработанный чтобы «делать правильные вещи» для автоматической защиты сайта. Например, Django предоставляет безопасный способ управления учётными записями пользователей и паролями, избегая распространённых ошибок, таких как размещение информации о сеансе в файлы cookie, где она уязвима (вместо этого файлы cookie содержат только ключ, а фактические данные хранятся в базе данных) или непосредственное хранение паролей вместо хэша пароля."
"Хэш пароля — это значение фиксированной длины, созданное путём обработки пароля через криптографическую хэш-функцию. Django может проверить правильность введённого пароля, пропустив его через хэш-функцию и сравнив вывод с сохранённым значением хэша. Благодаря «одностороннему» характеру функции, даже если сохранённое хэш-значение скомпрометировано, злоумышленнику будет сложно определить исходный пароль.")